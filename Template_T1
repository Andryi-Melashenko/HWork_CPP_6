#include <iostream>
template <class T1, class T2>
class Parent
{
	T1 value1;
	T2 value2;
public :
	Parent() {};
	Parent(T1 v1, T2 v2) :value1{ v1 }, value2{ v2 }{};
	T1 getValue1()
	{
		return value1;
	}
	void setValue1(T1 v1)
	{
		value1 = v1;
	}
	T2 getValue2()
	{
		return value2;
	}
	void setValue2(T2 v2)
	{
		value2 = v2;
	}
};
template<class T1, class T2, class T3, class T4>
class Child : public Parent<T1, T2>
{
	T3 value3;
	T4 value4;
public:
	Child(T1 v1, T2 v2, T3 v3, T4 v4) :Parent<T1, T2>(v1, v2), value3{ v3 }, value4{ v4 }{};
	T3 getvalue3()
	{
		return value3;
	}
	void setvalue3(T3 v3)
	{
		value3 = v3;
	}
	T4 getvalue4()
	{
		return value4;
	}
	void setvalue4(T4 v4)
	{
		value4 = v4;
	}
};
template<class T1, class T2, class T3, class T4, class T5, class  T6>
class ChildV2 : public Child<T1,T2,T3,T4>
{
	T5 value5;
	T6 value6;
public:
	ChildV2(T1 v1, T2 v2,T3 v3,T4 v4, T5 v5, T6 v6) :Child<T1,T2,T3,T4>(v1,v2,v3,v4), value5{ v5 }, value6{ v6 }{};
	T5 getvalue5()
	{
		return value5;
	}
	void setvalue5(T5 v5)
	{
		value5 = v5;
	}
	T6 getvalue6()
	{
		return value6;
	}
	void setvalue6(T6 v6)
	{
		value6 = v6;
	}
};
int main()
{
	Child<int, char, int, char>d(1, '1', 1, '1');
	ChildV2<int, char, int, char,int,int>V2( 1,'1',1,'1',1,1 );
}
